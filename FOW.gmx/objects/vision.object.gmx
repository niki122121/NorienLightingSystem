<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fovsurface = surface_create(room_width, room_height);

line_d=sqrt(room_height*room_height+room_width*room_width)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(fovsurface)) {
draw_surface(fovsurface,0,0)
}

surface_set_target(fovsurface)
    
    draw_set_colour(c_black)   
    draw_set_alpha(0.5)
    draw_set_blend_mode(bm_normal)
    draw_rectangle(0,0,room_width,room_height,false)
    
    //draw_set_colour(c_white)   
    //draw_set_alpha(0.5)
    draw_set_blend_mode(bm_subtract)
    draw_set_alpha(1)
    
    with(colider) {      
        draw_primitive_begin(pr_trianglefan)
        draw_vertex(other.x,other.y)
        for(i = 0; i &lt;= 500; i += 1)
            {
            r[0] = noone
            radius = 250
            var r = collision_line_point(other.x,other.y,other.x + lengthdir_x(radius, 360 * i / 500),other.y + lengthdir_y(radius, 360 * i / 500),colider,true,false)
            //if (r[0] != noone){
                colider.radius = point_distance(other.x,other.y,r[1], r[2])
            //}
            draw_vertex(other.x + lengthdir_x(radius, 360 * i / 500), other.y + lengthdir_y(radius, 360 * i / 500));
            }
        
        draw_primitive_end()     
    }
    
    draw_set_blend_mode(bm_normal)

surface_reset_target(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
